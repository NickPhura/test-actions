# PR Based Deploy On OpenShift
# Builds and Deploys unmerged PR's to temporary pods/services/routes/etc in the OpenShift Dev environment.
name: PR-Based Deploy on OpenShift

on:
  pull_request:
    types: [opened, reopened, synchronize, ready_for_review]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.number }}
  cancel-in-progress: true

jobs:
  cacheRepo:
    name: Checkout and cache target branch
    runs-on: ubuntu-latest
    env:
      PR_NUMBER: ${{ github.event.number }}
    needs:
      - checkEnv
    steps:
      - name: Checkout Target Branch
        uses: actions/checkout@v2

      - run: echo "::debug::$GITHUB_WORKSPACE"

      - run: echo "::debug::{{ $GITHUB_WORKSPACE }}"

      - run: echo "::debug::${{ GITHUB_WORKSPACE }}"

      # - name: Upload Target Branch
      #   uses: actions/download-artifact@v3
      #   with:
      #     name: repo-cache
      #     path: path/to/artifact/world.txt

      # - name: Download Target Branch
      #   uses: actions/download-artifact@v3
      #   with:
      #     name: repo-cache
      #     path: path/to/artifact/world.txt

  # buildApp1:
  #   name: Build App 1
  #   runs-on: ubuntu-latest
  #   if: ${{ github.event.pull_request.merged == false && github.event.pull_request.draft == false }}
  #   env:
  #     PR_NUMBER: ${{ github.event.number }}
  #   needs:
  #     - scaleDownPods
  #   steps:
  #     # Checkout the PR branch
  #     - name: Checkout Target Branch
  #       uses: actions/checkout@v2

  #     # Install Node - for `node` and `npm` commands
  #     - name: Setup Node.js
  #       uses: actions/setup-node@v2
  #       with:
  #         node-version: 14

  #     # Cache Node modules
  #     - name: Cache node modules
  #       uses: actions/cache@v2
  #       env:
  #         cache-name: cache-node-modules
  #       with:
  #         # npm cache files are stored in `~/.npm` on Linux/macOS
  #         path: ~/.npm
  #         key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
  #         restore-keys: |
  #           ${{ runner.os }}-build-${{ env.cache-name }}-
  #           ${{ runner.os }}-build-
  #           ${{ runner.os }}-

  #     - name: Build App 1
  #       working-directory: "./database/.pipeline/"
  #       run: |
  #         # npm install
  #         npm ci --only=production
  #         DEBUG=* npm run db:build -- --pr=$PR_NUMBER

  # buildApp2:
  #   name: Build App 2
  #   runs-on: ubuntu-latest
  #   if: ${{ github.event.pull_request.merged == false && github.event.pull_request.draft == false }}
  #   env:
  #     PR_NUMBER: ${{ github.event.number }}
  #   needs:
  #     - scaleDownPods
  #   steps:
  #     # Checkout the PR branch
  #     - name: Checkout Target Branch
  #       uses: actions/checkout@v2

  #     # Install Node - for `node` and `npm` commands
  #     - name: Setup Node.js
  #       uses: actions/setup-node@v2
  #       with:
  #         node-version: 14

  #     # Cache Node modules
  #     - name: Cache node modules
  #       uses: actions/cache@v2
  #       env:
  #         cache-name: cache-node-modules
  #       with:
  #         # npm cache files are stored in `~/.npm` on Linux/macOS
  #         path: ~/.npm
  #         key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
  #         restore-keys: |
  #           ${{ runner.os }}-build-${{ env.cache-name }}-
  #           ${{ runner.os }}-build-
  #           ${{ runner.os }}-

  #     - name: Build App 2
  #       working-directory: "./database/.pipeline/"
  #       run: |
  #         # npm install
  #         npm ci --only=production
  #         DEBUG=* npm run db:build -- --pr=$PR_NUMBER
