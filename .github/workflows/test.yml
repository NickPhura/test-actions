# PR Based Deploy On OpenShift
# Builds and Deploys unmerged PR's to temporary pods/services/routes/etc in the OpenShift Dev environment.
name: Test Actions

on:
  pull_request:
    types: [opened, reopened, synchronize, ready_for_review]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.number }}
  cancel-in-progress: true

jobs:
  # Print variables for logging and debugging purposes
  checkEnv:
    name: Print Env variables
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: ${{ github.event.pull_request.merged == false }}
    steps:
      - name: Print Env Vars
        run: |
          echo OC CLI Version: $(oc version)
          echo Git Base Ref: ${{ github.base_ref }}
          echo Git Change ID: ${{ github.event.number }}
          echo Git Pull Request Ref: ${{ github.event.pull_request.head.sha }}
          echo Git Event Name: ${{ github.event_name }}
          echo Git Event Action: ${{ github.event.action }}
          echo Git Ref: ${{ github.head_ref || github.ref_name }}
          echo Git Labels: "$LABELS"
          echo PR in Draft: ${{ github.event.pull_request.draft }}

  cacheRepo:
    name: Checkout and cache target branch
    runs-on: ubuntu-latest
    env:
      PR_NUMBER: ${{ github.event.number }}
    steps:
      # Install Node - for `node` and `npm` commands
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 14

      - name: Checkout Target Branch
        uses: actions/checkout@v3

      # Cache Node modules
      - name: Cache repo
        uses: actions/cache@v3
        id: cache-repo
        env:
          cache-name: cache-repo
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ${{ github.workspace }}/*
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-${{ github.sha }}

  skipDuplicateActions:
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
      paths_result: ${{ steps.skip_check.outputs.paths_result }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@v5
        with:
          paths_filter: |
            app1:
              paths:
                - 'app1/src/**'
                - 'app1/package*.json'
              paths_ignore:
                - 'app1/README.md'
                - 'app1/**/*.test.js'
            app2:
              paths:
                - 'app2/src/**'
                - 'app2/package*.json'
              paths_ignore:
                - 'app2/README.md'
                - 'app2/**/*.test.js'
          paths_ignore: '["**/README.md", "**/*.test.js"]'

  # Print variables for logging and debugging purposes
  checkSkip:
    name: Print Env variables
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: ${{ github.event.pull_request.merged == false }}
    needs:
      - skipDuplicateActions
    steps:
      - name: Print Env Vars
        run: |
          echo test1: ${{ fromJSON(needs.skipDuplicateActions.outputs.paths_result).app1.skipped_by.branch }}
          echo test2: ${{ fromJSON(needs.skipDuplicateActions.outputs.paths_result.app1).skipped_by.branch }}

  buildApp1:
    name: Build App 1
    runs-on: ubuntu-latest
    # if: ${{ github.event.pull_request.merged == false && github.event.pull_request.draft == false }}
    if: ${{ github.event.pull_request.merged == false && github.event.pull_request.draft == false && !fromJSON(needs.skipDuplicateActions.outputs.paths_result).app1.should_skip }}
    env:
      PR_NUMBER: ${{ github.event.number }}
    needs:
      - cacheRepo
      - skipDuplicateActions
    steps:
      # Install Node - for `node` and `npm` commands
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 14

      # Cache the repo
      - name: Cache repo
        uses: actions/cache@v3
        id: cache-repo
        env:
          cache-name: cache-repo
        with:
          path: ${{ github.workspace }}/*
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-${{ github.sha }}

      # Checkout the branch
      - name: Checkout Target Branch
        if: steps.cache-repo.outputs.cache-hit != 'true'
        uses: actions/checkout@v3

      # Cache Node modules
      - name: Cache node modules
        if: steps.app-diff.outputs.any_changed == 'true'
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('*/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-

      - name: Build App 1
        working-directory: "app1"
        run: |
          npm install
          node src/app1.js

  buildApp2:
    name: Build App 2
    runs-on: ubuntu-latest
    # if: ${{ github.event.pull_request.merged == false && github.event.pull_request.draft == false }}
    if: ${{ github.event.pull_request.merged == false && github.event.pull_request.draft == false && !fromJSON(needs.skipDuplicateActions.outputs.paths_result).app2.should_skip }}
    env:
      PR_NUMBER: ${{ github.event.number }}
    needs:
      - cacheRepo
      - skipDuplicateActions
    steps:
      # Install Node - for `node` and `npm` commands
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 14

      # Cache the repo
      - name: Cache repo
        uses: actions/cache@v3
        id: cache-repo
        env:
          cache-name: cache-repo
        with:
          path: ${{ github.workspace }}/*
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-${{ github.sha }}

      # Checkout the branch
      - name: Checkout Target Branch
        if: steps.cache-repo.outputs.cache-hit != 'true'
        uses: actions/checkout@v3

      # Cache Node modules
      - name: Cache node modules
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('*/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-

      - name: Build App 2
        working-directory: "app2"
        run: |
          npm install
          node src/app2.js
