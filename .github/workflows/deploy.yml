# PR Based Deploy On OpenShift
# Builds and Deploys unmerged PR's to temporary pods/services/routes/etc in the OpenShift Dev environment.
name: PR-Based Deploy on OpenShift

on:
  pull_request:
    types: [opened, reopened, synchronize, ready_for_review]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.number }}
  cancel-in-progress: true

jobs:
  checkEnv:
    name: Print Env variables
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: ${{ github.event.pull_request.merged == false }}
    steps:
      - name: Print Env Vars
        run: |
          echo OC CLI Version: $(oc version)
          echo Git Base Ref: ${{ github.base_ref }}
          echo Git Change ID: ${{ github.event.number }}
          echo Git Pull Request Ref: ${{ github.event.pull_request.head.sha }}
          echo Git Event Name: ${{ github.event_name }}
          echo Git Event Action: ${{ github.event.action }}
          echo Git Branch Ref: ${{ github.head_ref }}
          echo PR in Draft: ${{ github.event.pull_request.draft }}

  # Scans the commit against past commits, and determines if any jobs are skippable (due to no changes in target files).
  # Note: this does not take into account the current branch and will check past workflows from any branch, so an
  # additional check against the current branch is added to the `if` in the build jobs below.
  skipDuplicateActions:
    name: Check for duplicate actions
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: ${{ github.event.pull_request.merged == false }}
    needs:
      - checkEnv
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
      paths_result: ${{ steps.skip_check.outputs.paths_result }}
      # Set to `true` if the latest commit message contains `ignore-skip` anywhere in the message.
      # Used to disable duplicate action skipping, if needed.
      ignore_skip: ${{ contains(steps.head_commit_message.outputs.commit_message, 'ignore-skip') }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@v5
        with:
          paths_filter: |
            app:
              paths:
                - 'app/src/**'
                - 'app/package*.json'
                - 'app/.pipeline/**'
              paths_ignore:
                - 'app/src/**/*.test.ts'
                - 'app/src/**/*.test.js'
                - 'app/**.md'
            app2:
              paths:
                - 'app2/src/**'
                - 'app2/package*.json'
                - 'app2/.pipeline/**'
              paths_ignore:
                - 'app2/src/**/*.test.ts'
                - 'app2/src/**/*.test.js'
                - 'app2/**.md'

      # Get the head commit for this pull request, parse out the commit message, and assign to the `commit_message`
      # output variable.
      - name: Checkout head commit
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Get head commit message
        id: head_commit_message
        run: |
          echo commit message: $(git show -s --format=%s)
          echo "commit_message=$(git show -s --format=%s)" >> $GITHUB_OUTPUT

  checkEnv2:
    name: Print Env variables
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: ${{ github.event.pull_request.merged == false }}
    env:
      IS_MERGED: ${{ github.event.pull_request.merged }}
      IS_DRAFT: ${{ github.event.pull_request.draft }}
      IGNORE_SKIP: ${{ needs.skipDuplicateActions.outputs.ignore_skip }}
      SHOULD_SKIP: ${{ fromJSON(needs.skipDuplicateActions.outputs.paths_result).app.should_skip && fromJSON(needs.skipDuplicateActions.outputs.paths_result).app.skipped_by.branch == github.head_ref }}
    needs:
      - skipDuplicateActions
    steps:
      - name: Print Env Vars 2
        run: |
          echo _IS_MERGED: $IS_MERGED
          echo _IS_DRAFT: $IS_DRAFT
          echo _IGNORE_SKIP: $IGNORE_SKIP
          echo _SHOULD_SKIP: $SHOULD_SKIP
          echo conclusion1: ${{ github.event.pull_request.merged == false && github.event.pull_request.draft == false }}
          echo conclusion1: ${{ github.event.pull_request.merged == 'false' }}
          echo conclusion1: ${{ !!github.event.pull_request.merged }}
          echo conclusion2: ${{ needs.skipDuplicateActions.outputs.ignore_skip == true }}
          echo conclusion2: ${{ needs.skipDuplicateActions.outputs.ignore_skip == 'true' }}
          echo conclusion2: ${{ !!needs.skipDuplicateActions.outputs.ignore_skip }}
          echo conclusion3: ${{ fromJSON(needs.skipDuplicateActions.outputs.paths_result).app.should_skip == true && 
                                fromJSON(needs.skipDuplicateActions.outputs.paths_result).app.skipped_by.branch == github.head_ref 
                            }}
          echo conclusion4: ${{ needs.skipDuplicateActions.outputs.ignore_skip == true || (
                                  fromJSON(needs.skipDuplicateActions.outputs.paths_result).app.should_skip == true && 
                                  fromJSON(needs.skipDuplicateActions.outputs.paths_result).app.skipped_by.branch == github.head_ref
                                )
                            }}
          echo conclusion5: ${{ github.event.pull_request.merged == false && 
                                github.event.pull_request.draft == false && (
                                  needs.skipDuplicateActions.outputs.ignore_skip == true || (
                                    fromJSON(needs.skipDuplicateActions.outputs.paths_result).app.should_skip == true && 
                                    fromJSON(needs.skipDuplicateActions.outputs.paths_result).app.skipped_by.branch == github.head_ref
                                  )
                                )
                            }}

  # Checkout the repo once and cache it for use in subsequent jobs
  checkoutRepo:
    name: Checkout and cache target branch
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: |
      github.event.pull_request.merged == false && 
      github.event.pull_request.draft == false
    env:
      PR_NUMBER: ${{ github.event.number }}
    needs:
      - skipDuplicateActions
    steps:
      - name: Checkout Target Branch
        uses: actions/checkout@v3
        with:
          persist-credentials: false

      # Cache the repo
      - name: Cache repo
        uses: actions/cache@v3
        id: cache-repo
        env:
          cache-name: cache-repo
        with:
          # Cache repo based on the commit sha that triggered the workflow
          path: ${{ github.workspace }}/*
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ github.sha }}

      # Install Node - for `node` and `npm` commands
      # Note: This already uses actions/cache internally, so repeat calls in subsequent jobs are not a performance hit
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 14

  # Build the web frontend app images
  buildAPP:
    name: Build APP Image
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: |
      github.event.pull_request.merged == false && 
      github.event.pull_request.draft == false && (
        needs.skipDuplicateActions.outputs.ignore_skip == true || 
        (
          fromJSON(needs.skipDuplicateActions.outputs.paths_result).app.should_skip && 
          fromJSON(needs.skipDuplicateActions.outputs.paths_result).app.skipped_by.branch == github.head_ref
        ) == false
      )
    # if: |
    #   github.event.pull_request.merged == false &&
    #   github.event.pull_request.draft == false &&
    #   (needs.skipDuplicateActions.outputs.ignore_skip ||
    #     !(fromJSON(needs.skipDuplicateActions.outputs.paths_result).app.should_skip &&
    #     fromJSON(needs.skipDuplicateActions.outputs.paths_result).app.skipped_by.branch == github.head_ref))
    env:
      PR_NUMBER: ${{ github.event.number }}
      APP_NAME: "biohubbc-app"
    needs:
      - checkoutRepo
      - skipDuplicateActions
    steps:
      # Load repo from cache
      - name: Cache repo
        uses: actions/cache@v3
        id: cache-repo
        env:
          cache-name: cache-repo
        with:
          path: ${{ github.workspace }}/*
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ github.sha }}

      # Checkout the branch if not restored via cache
      - name: Checkout Target Branch
        if: steps.cache-repo.outputs.cache-hit != 'true'
        uses: actions/checkout@v3

      # Install Node - for `node` and `npm` commands
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 14

      # Install app pipeline node modules
      # Note: This already caches node modules internally
      - name: Install pipeline node modules
        working-directory: app/.pipeline/
        run: npm ci

      # Build the app image
      - name: Build APP Image
        working-directory: app/.pipeline/
        run: |
          DEBUG=* npm run build -- --pr=$PR_NUMBER

  # Build the web frontend app image
  buildAPP2:
    name: Build APP2 Image
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: |
      github.event.pull_request.merged == false && 
      github.event.pull_request.draft == false && (
        needs.skipDuplicateActions.outputs.ignore_skip == true || 
        (
          fromJSON(needs.skipDuplicateActions.outputs.paths_result).app.should_skip && 
          fromJSON(needs.skipDuplicateActions.outputs.paths_result).app.skipped_by.branch == github.head_ref
        ) == false
      )
    # if: |
    #   github.event.pull_request.merged == false &&
    #   github.event.pull_request.draft == false &&
    #   (needs.skipDuplicateActions.outputs.ignore_skip ||
    #     !(fromJSON(needs.skipDuplicateActions.outputs.paths_result).app.should_skip &&
    #     fromJSON(needs.skipDuplicateActions.outputs.paths_result).app.skipped_by.branch == github.head_ref))
    env:
      PR_NUMBER: ${{ github.event.number }}
      APP_NAME: "biohubbc-app"
    needs:
      - checkoutRepo
      - skipDuplicateActions
    steps:
      # Load repo from cache
      - name: Cache repo
        uses: actions/cache@v3
        id: cache-repo
        env:
          cache-name: cache-repo
        with:
          path: ${{ github.workspace }}/*
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ github.sha }}

      # Checkout the branch if not restored via cache
      - name: Checkout Target Branch
        if: steps.cache-repo.outputs.cache-hit != 'true'
        uses: actions/checkout@v3

      # Install Node - for `node` and `npm` commands
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 14

      # Install app pipeline node modules
      # Note: This already caches node modules internally
      - name: Install pipeline node modules
        working-directory: app/.pipeline/
        run: npm ci

      # Build the app image
      - name: Build APP Image
        working-directory: app/.pipeline/
        run: |
          DEBUG=* npm run build -- --pr=$PR_NUMBER

  # Report the overall status of all jobs.
  # Why? Skipped jobs are not considered successes when specifying requird jobs in the GitHub PR settings. Rather than
  # specify each job, we can specify this final job only, and use its status as an indicator of all previous jobs
  # having successfully run. We can then manually include the 'skipped' status as part our definition of success.
  workflowStatus:
    name: Workflow Status
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: |
      always() &&
      github.event.pull_request.merged == false && 
      github.event.pull_request.draft == false
    needs:
      - checkEnv
      - skipDuplicateActions
      - checkoutRepo
      - buildAPP
      - buildAPP2
    steps:
      - name: Log result
        run: |
          echo needs.checkEnv.result: ${{ needs.checkEnv.result }}
          echo needs.skipDuplicateActions.result: ${{ needs.skipDuplicateActions.result }}
          echo needs.checkoutRepo.result: ${{ needs.checkoutRepo.result }}
          echo needs.buildAPP.result: ${{ needs.buildAPP.result }}
          echo needs.buildAPP2.result: ${{ needs.buildAPP2.result }}

      - name: Report success
        if: |
          !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled')
        run: |
          echo All deployments completed successfully or were skipped
          exit 0

      - name: Report failure
        if: |
          contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled')
        run: |
          echo One or more deployments failed or was cancelled
          exit 1
